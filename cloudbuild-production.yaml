# Cloud Build configuration for production deployment
# This file handles the complete CI/CD pipeline for Verbio backend

substitutions:
  _SERVICE_NAME: verbio-backend
  _REGION: us-central1
  _IMAGE_NAME: verbio-backend
  _ENV_FILE_SECRET: verbio-env-vars
  _MIN_INSTANCES: '1'
  _MAX_INSTANCES: '100'
  _MEMORY: '2Gi'
  _CPU: '2'
  _TIMEOUT: '300'
  _CONCURRENCY: '1000'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

steps:
  # Step 1: Install backend dependencies and run tests
  - name: 'node:20-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd backend
        echo "üì¶ Installing dependencies..."
        npm install
        echo "üß™ Running tests..."
        npm test || true
        echo "üîç Running linter..."
        npm run lint || true
    id: 'test-backend'

  # Step 2: Build TypeScript
  - name: 'node:20-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd backend
        echo "üî® Building TypeScript..."
        npm run build
        echo "‚úÖ Build completed successfully"
    id: 'build-typescript'
    waitFor: ['test-backend']

  # Step 3: Build Docker image with cache
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$BRANCH_NAME-$SHORT_SHA'
      - '-f'
      - 'backend/Dockerfile'
      - '--build-arg'
      - 'NODE_ENV=production'
      - 'backend'
    id: 'build-image'
    waitFor: ['build-typescript']

  # Step 4: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}'
    id: 'push-image'
    waitFor: ['build-image']

  # Step 5: Run security scan on the image
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'images'
      - 'scan'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
    id: 'scan-image'
    waitFor: ['push-image']

  # Step 6: Retrieve secrets from Secret Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîê Retrieving secrets..."
        gcloud secrets versions access latest --secret="${_ENV_FILE_SECRET}" > env_vars.yaml || true
        if [ ! -f env_vars.yaml ]; then
          echo "‚ö†Ô∏è  No secrets found, using default configuration"
          echo "" > env_vars.yaml
        fi
    id: 'get-secrets'

  # Step 7: Deploy to Cloud Run with traffic management
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üöÄ Deploying to Cloud Run..."

        # Base deployment command
        gcloud run deploy ${_SERVICE_NAME} \
          --image=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA \
          --platform=managed \
          --region=${_REGION} \
          --allow-unauthenticated \
          --min-instances=${_MIN_INSTANCES} \
          --max-instances=${_MAX_INSTANCES} \
          --memory=${_MEMORY} \
          --cpu=${_CPU} \
          --timeout=${_TIMEOUT} \
          --concurrency=${_CONCURRENCY} \
          --port=8080 \
          --cpu-boost \
          --execution-environment=gen2 \
          --service-account=${_SERVICE_NAME}@${PROJECT_ID}.iam.gserviceaccount.com \
          --set-env-vars="NODE_ENV=production" \
          --set-env-vars="PORT=8080" \
          --set-env-vars="LOG_LEVEL=info" \
          --set-env-vars="BACKEND_URL=https://${_SERVICE_NAME}-${PROJECT_NUMBER}-uc.a.run.app" \
          --set-env-vars="GCP_PROJECT_ID=${PROJECT_ID}" \
          --set-env-vars="BUILD_ID=${BUILD_ID}" \
          --set-env-vars="COMMIT_SHA=${SHORT_SHA}" \
          --set-secrets="OPENAI_API_KEY=openai-api-key:latest" \
          --set-secrets="TWILIO_ACCOUNT_SID=twilio-account-sid:latest" \
          --set-secrets="TWILIO_AUTH_TOKEN=twilio-auth-token:latest" \
          --set-secrets="TWILIO_PHONE_NUMBER=twilio-phone-number:latest" \
          --set-secrets="STRIPE_SECRET_KEY=stripe-secret-key:latest" \
          --set-secrets="STRIPE_WEBHOOK_SECRET=stripe-webhook-secret:latest" \
          --set-secrets="SUPABASE_URL=supabase-url:latest" \
          --set-secrets="SUPABASE_ANON_KEY=supabase-anon-key:latest" \
          --set-secrets="SUPABASE_SERVICE_KEY=supabase-service-key:latest" \
          --set-secrets="JWT_SECRET=jwt-secret:latest" \
          --set-secrets="COOKIE_SECRET=cookie-secret:latest" \
          --set-secrets="SENTRY_DSN=sentry-dsn:latest" \
          --add-cloudsql-instances=${PROJECT_ID}:${_REGION}:verbio-db \
          --update-labels="version=$SHORT_SHA,managed-by=cloudbuild,branch=$BRANCH_NAME" \
          --tag=latest \
          --no-traffic

        echo "‚úÖ Deployment completed"
    id: 'deploy-cloud-run'
    waitFor: ['scan-image', 'get-secrets']

  # Step 8: Run smoke tests against the deployed service
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Running smoke tests..."

        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')

        echo "Service URL: $SERVICE_URL"

        # Test health endpoint
        HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/healthz")

        if [ "$HEALTH_CHECK" = "200" ]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed with status: $HEALTH_CHECK"
          exit 1
        fi

        # Test root endpoint
        ROOT_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/")

        if [ "$ROOT_CHECK" = "200" ]; then
          echo "‚úÖ Root endpoint check passed"
        else
          echo "‚ö†Ô∏è  Root endpoint returned status: $ROOT_CHECK"
        fi
    id: 'smoke-test'
    waitFor: ['deploy-cloud-run']

  # Step 9: Gradually migrate traffic to new version
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîÑ Migrating traffic to new version..."

        # Start with 10% traffic
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --region=${_REGION} \
          --to-tags=latest=10

        echo "üìä 10% traffic migrated, monitoring for 30 seconds..."
        sleep 30

        # If no issues, move to 50%
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --region=${_REGION} \
          --to-tags=latest=50

        echo "üìä 50% traffic migrated, monitoring for 30 seconds..."
        sleep 30

        # Finally, move to 100%
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --region=${_REGION} \
          --to-tags=latest=100

        echo "‚úÖ 100% traffic migrated to new version"
    id: 'migrate-traffic'
    waitFor: ['smoke-test']

  # Step 10: Notify deployment status
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üì¢ Deployment Summary"
        echo "===================="
        echo "Service: ${_SERVICE_NAME}"
        echo "Region: ${_REGION}"
        echo "Image: gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA"
        echo "Commit: $COMMIT_SHA"
        echo "Branch: $BRANCH_NAME"
        echo "Build ID: $BUILD_ID"

        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')

        echo "Service URL: $SERVICE_URL"
        echo ""
        echo "‚úÖ Deployment completed successfully!"

        # Store deployment info for rollback
        echo "{
          \"service\": \"${_SERVICE_NAME}\",
          \"region\": \"${_REGION}\",
          \"image\": \"gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA\",
          \"commit\": \"$COMMIT_SHA\",
          \"branch\": \"$BRANCH_NAME\",
          \"buildId\": \"$BUILD_ID\",
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"url\": \"$SERVICE_URL\"
        }" | gcloud storage cp - gs://${PROJECT_ID}-deployments/${_SERVICE_NAME}/deployment-$SHORT_SHA.json
    id: 'notify-status'
    waitFor: ['migrate-traffic']

# Timeout for the entire build
timeout: '1800s'  # 30 minutes

# Build artifacts to preserve
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-build-artifacts'
    paths:
      - 'backend/dist/**/*'
      - 'deployment-$SHORT_SHA.json'

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'
  - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$BRANCH_NAME-$SHORT_SHA'